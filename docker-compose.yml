version: '3.9'

# Volumes are the preferred mechanism for persisting data
# generated by and used by Docker containers.

# While bind mounts are dependent on the directory structure
# and OS of the host machine, volumes are completely managed by Docker.

# A volume does not increase the size of the containers using it. 
# The volumeâ€™s contents exist outside the lifecycle of a given container.



# volumes:      While it is possible to declare volumes on the fly as part of the service declaration, 
#               this section allows you to create named volumes that can be reused across multiple services
# driver:       specify which volume driver should be used for this volume. 
#               Defaults to whatever driver the Docker Engine has been configured to use, which in most cases is local. 
# driver_opts:  Specify a list of options as key-value pairs to pass to the driver for this volume.
# type:         'none' -> no physical disk partition linked to the mount point
# device:       path to safed volumes        
volumes:
  WordPress:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/akurz/data/wordpress
  MariaDB:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/akurz/data/mariadb
  


services:
  mariadb:
    container_name: mariadb_c
    build:
      context: ./mariadb
    env_file:
      - .env
    volumes:
      - MariaDB:/var/lib/mysql
    networks:
      - localhost
    # restart: always

  nginx:
    container_name: nginx_c
    build:
      context: ./nginx
    ports:
      - "443:443"
    volumes:
      - WordPress:/var/www/wordpress
    networks:
      - localhost
    depends_on:
      - wordpress
    # restart: always

  wordpress:
    container_name: wordpress_c
    build:
      context: ./wordpress
    env_file:
      - .env
    depends_on:
      - mariadb
    volumes:
      - WordPress:/var/www/wordpress
    networks:
      - localhost
    # restart: always


networks:
  localhost: { }